// AsegÃºrate de que estas dependencias estÃ©n disponibles.
import fetch from 'node-fetch';Â 
import fs from 'fs/promises'; // Para operaciones asÃ­ncronas de archivos
import path from 'path'; // Para manejar rutas de archivos

// --- CONFIGURACIÃ“N DE CYPHERTRANS ---
const HASH_FILE_PATH = path.join(process.cwd(), 'src', 'hash.json');Â 
const API_URL = 'https://cyphertrans.duckdns.org';Â 

// Las variables globales 'global.db.data.users' y 'moneda' son necesarias para esta funciÃ³n.
const moneda = global.moneda || 'Coin';

/**
 * Extrae el nÃºmero de telÃ©fono del nÃºmero de cuenta CypherTrans.
 * @param {string} recipientAccount - La cuenta CypherTrans (ej: 521XXXXXXXXMARC1234).
 * @returns {string} El nÃºmero de telÃ©fono (ej: 521XXXXXXXX).
 */
function extractUserNumber(recipientAccount) {
    return recipientAccount.slice(0, -7);Â 
}

/**
 * Busca todos los JIDs de GRUPO donde se encuentra el nÃºmero de usuario.
 * @param {string} userNumber - El nÃºmero de telÃ©fono del usuario (ej: 521XXXXXXXX).
 * @param {object} sock - El objeto de conexiÃ³n de WhatsApp (Baileys).
 * @returns {Promise<string[]>} Una promesa que resuelve un array de JIDs de grupo ([groupJID1, groupJID2...]).
 */
async function findGroupJIDs(userNumber, sock) {
    const groupJIDs = [];
Â  Â  try {
Â  Â  Â  Â  const allGroups = await sock.groupFetchAllParticipating();
Â  Â  Â  Â Â 
Â  Â  Â  Â  for (const [jid, groupData] of Object.entries(allGroups)) {
Â  Â  Â  Â  Â  Â  if (!groupData.participants) continue;
            
            // Verificamos si el usuario es participante en este grupo
Â  Â  Â  Â  Â  Â  for (const participant of groupData.participants) {
Â  Â  Â  Â  Â  Â  Â  Â  const participantNumber = participant.id.split('@')[0];
Â  Â  Â  Â  Â  Â  Â  Â  if (participantNumber === userNumber) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  groupJIDs.push(participant.id); // Agregamos el JID del grupo
                    break; 
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error al buscar JIDs de grupo:", error);
Â  Â  }
Â  Â  return groupJIDs;Â 
}

/**
 * Obtiene el hash del bot desde el archivo local.
 * (Sin cambios, es una funciÃ³n de soporte necesaria)
 */
async function getBotHashFromFile() {
Â  Â  try {
Â  Â  Â  Â  const data = await fs.readFile(HASH_FILE_PATH, 'utf-8');
Â  Â  Â  Â  const hashData = JSON.parse(data);
Â  Â  Â  Â  if (hashData && hashData.bot_hash) {
Â  Â  Â  Â  Â  Â  return hashData.bot_hash;
Â  Â  Â  Â  }
Â  Â  Â  Â  return null;
Â  Â  } catch (error) {
Â  Â  Â  Â  if (error.code === 'ENOENT') {
Â  Â  Â  Â  Â  Â  console.warn(`[CypherTrans] Advertencia: Archivo de hash no encontrado en ${HASH_FILE_PATH}.`);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.error(`[CypherTrans] Error leyendo hash.json:`, error.message);
Â  Â  Â  Â  }
Â  Â  Â  Â  return null;
Â  Â  }
}

// --- FUNCIÃ“N PRINCIPAL DE CHEQUEO DE TRANSACCIONES ---

export async function checkCypherTransInbound(sock) {
Â  Â  if (!sock) return console.error('[CypherTrans] Error: Objeto de conexiÃ³n (sock) no proporcionado.');
Â  Â Â 
Â  Â  const BOT_HASH = await getBotHashFromFile();
Â  Â  if (!BOT_HASH) return console.log('[CypherTrans] Solicitud omitida: Bot no registrado.');
Â  Â Â 
Â  Â  try {
Â  Â  Â  Â  const response = await fetch(`${API_URL}/api/v1/inbound_history`, {
Â  Â  Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  Â  Â  Â  body: JSON.stringify({ bot_hash: BOT_HASH })
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!response.ok) return console.error(`[CypherTrans] Error en la API: ${response.status} ${response.statusText}`);

Â  Â  Â  Â  const newTransactions = await response.json();
Â  Â  Â  Â  if (newTransactions.length === 0) return;

Â  Â  Â  Â  console.log(`[CypherTrans] ${newTransactions.length} nuevas transacciones entrantes encontradas.`);

Â  Â  Â  Â  for (const tx of newTransactions) {
            
            // 1. Determinar el JID basado en la cuenta y la DB
Â  Â  Â  Â  Â  Â  const userNumber = extractUserNumber(tx.recipient);
            const standardJID = `${userNumber}@s.whatsapp.net`;
            const lidJID = `${userNumber}@lid`; // Asumiendo este es el formato de tu @lid
            
            let targetJID = null;
            let notificationType = ''; // 'group' o 'private'
            
            // Prioridad 1: Buscar por @lid
            if (global.db.data.users[lidJID]) {
                targetJID = lidJID;
                notificationType = 'group'; // Si estÃ¡ en @lid, notificamos en grupos.
            } 
            // Prioridad 2: Buscar por JID estÃ¡ndar
            else if (global.db.data.users[standardJID]) {
                targetJID = standardJID;
                notificationType = 'private'; // Si estÃ¡ en JID estÃ¡ndar, notificamos en privado.
            }
            
            // 2. Procesar si se encontrÃ³ un usuario en la DB
Â  Â  Â  Â  Â  Â  if (targetJID) {
Â  Â  Â  Â  Â  Â  Â  Â  const amount = tx.amount;Â 
Â  Â  Â  Â  Â  Â  Â  Â  const receiptUrl = `${API_URL}/receipt/${tx.tx_id}`;
Â  Â  Â  Â  Â  Â  Â  Â  const contactId = userNumber; // Usamos el nÃºmero para la menciÃ³n
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  // --- LÃ“GICA DE DEPÃ“SITO AL BANCO ---
Â  Â  Â  Â  Â  Â  Â  Â  if (typeof global.db.data.users[targetJID].bank !== 'number') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  global.db.data.users[targetJID].bank = 0;
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  global.db.data.users[targetJID].bank += amount * 1;Â 
Â  Â  Â  Â  Â  Â  Â  Â  const newBankBalance = global.db.data.users[targetJID].bank;
Â  Â  Â  Â  Â  Â  Â  Â  console.log(`[CypherTrans] ${amount} depositado en el banco de ${targetJID}.`);
Â  Â  Â  Â  Â  Â  Â  Â  // ------------------------------------
Â  Â  Â  Â  Â  Â  Â  Â 
                // 3. Preparar mensajes
                const fullMessage = `âœ… *Â¡DepÃ³sito Multibot APROBADO!*` +
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  `\n\n*Monto Recibido:* *${amount} ${moneda}*` +
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  `\n*De la cuenta:* ${tx.sender}` +
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  `\n*ID TransacciÃ³n:* \`${tx.tx_id}\`` +
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  `\n\n*Tu nuevo saldo en el banco:* ${newBankBalance} ${moneda}` +
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  `\n\n_El dinero ha sido depositado en tu banco y estÃ¡ seguro._` +
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  `\n\nComprobante (HTML): ${receiptUrl}`;

                const groupNotice = `ðŸ”” *Aviso* @${contactId}, la transferencia Multibot de *${amount} ${moneda}* ha sido APROBADA y depositada en tu banco.`;

                // 4. LÃ³gica de NotificaciÃ³n
                if (notificationType === 'private') {
                    // Notificar en privado (JID estÃ¡ndar)
                    await sock.sendMessage(targetJID, {Â 
                        text: fullMessage,Â 
                        mentions: [targetJID]Â 
                    });
                    console.log(`[CypherTrans] NotificaciÃ³n COMPLETA enviada a CHAT PRIVADO de ${targetJID}.`);

                } else if (notificationType === 'group') {
                    // Notificar en todos los grupos (si es @lid)
                    const groupJIDs = await findGroupJIDs(userNumber, sock);
                    
                    if (groupJIDs.length > 0) {
                         const groupMessage = `[MENSAJE IMPORTANTE PARA @${contactId}] ${fullMessage}`;

                        for (const groupJID of groupJIDs) {
                            try {
                                await sock.sendMessage(groupJID, {
                                    text: groupMessage,
                                    mentions: [standardJID] // Necesitamos el JID estÃ¡ndar para la menciÃ³n
                                });
                            } catch (e) {
                                console.error(`[CypherTrans] Error al enviar mensaje COMPLETO a grupo ${groupJID}: ${e.message}`);
                            }
                        }
                        console.log(`[CypherTrans] NotificaciÃ³n COMPLETA enviada a ${groupJIDs.length} grupos (@lid mode).`);
                    } else {
                        console.log(`[CypherTrans] Usuario ${targetJID} encontrado (@lid) pero no se encontrÃ³ ningÃºn grupo compartido para notificar.`);
                    }
                }
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  console.log(`[CypherTrans] ERROR: Usuario ${userNumber} (ni @lid ni @s.whatsapp.net) no encontrado en la DB local.`);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error al verificar CypherTrans:", error.message);
Â  Â  }
}
